using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Primitives;
using Microsoft.IdentityModel.Tokens;
using OpenIddict.Abstractions;
using OpenIddict.Server.AspNetCore;
using static OpenIddict.Abstractions.OpenIddictConstants;
using System.Collections.Immutable;
using System.Security.Claims;
using Microsoft.Extensions.Localization;
using OpenIdDictMvcSvr.Localizers;
using OpenIdDictMvcSvr.Data;
using OpenIdDictMvcSvr.Dto;
using OpenIdDictMvcSvr.ActionAttributes;
using static OpenIddict.Abstractions.OpenIddictConstants.Permissions;
using OpenIdDictMvcSvr.Helpers;
using Microsoft.EntityFrameworkCore;
using OpenIdDictMvcSvr.Models;
using System.Linq;
using System.Security.Principal;
using static System.Net.Mime.MediaTypeNames;

namespace OpenIdDictMvcSvr.Controllers
{
    // Note: the error descriptions used in this controller are deliberately not localized as
    // the OAuth 2.0 specification only allows select US-ASCII characters in error_description.
    public class OpenIddictController : Controller
    {
        private readonly IOpenIddictApplicationManager _applicationManager;
        private readonly IOpenIddictAuthorizationManager _authorizationManager;
        private readonly IOpenIddictScopeManager _scopeManager;
        private readonly SignInManager<OidcIdentityUser> _signInManager;
        private readonly UserManager<OidcIdentityUser> _userManager;
        private readonly RoleManager<OidcIdentityRole> _roleManager;
        private readonly IConfiguration _configuration;
//        private readonly IStringLocalizer<OpenIddictLocalizerResource> _sharedLocalizer;
        private readonly string _claimprefixval = "";
        private readonly string _roleprefixval = "";

        public OpenIddictController(
            IOpenIddictApplicationManager applicationManager,
            IOpenIddictAuthorizationManager authorizationManager,
            IOpenIddictScopeManager scopeManager,
            SignInManager<OidcIdentityUser> signInManager,
            UserManager<OidcIdentityUser> userManager,
            RoleManager<OidcIdentityRole> roleManager,
            IConfiguration configuration
//            IStringLocalizer<OpenIddictLocalizerResource> sharedLocalizer
            )
        {
            _applicationManager = applicationManager;
            _authorizationManager = authorizationManager;
            _scopeManager = scopeManager;
            _signInManager = signInManager;
            _userManager = userManager;
            _roleManager = roleManager;
            _configuration = configuration;
//            _sharedLocalizer = sharedLocalizer;
            _claimprefixval = _configuration[nameof(OidcAllowedScope) + ":" + nameof(OidcAllowedScope.ClaimPrefix)];
            if (string.IsNullOrEmpty(_claimprefixval)) _claimprefixval = OidcAllowedScope.ClaimPrefix + "."; else _claimprefixval += ".";
            _roleprefixval = _configuration[nameof(OidcAllowedScope) + ":" + nameof(OidcAllowedScope.RolePrefix)];
            if (string.IsNullOrEmpty(_roleprefixval)) _roleprefixval = OidcAllowedScope.RolePrefix + "."; else _roleprefixval += ".";
        }

        // https://github.com/OrchardCMS/OrchardCore/blob/main/src/OrchardCore.Modules/OrchardCore.OpenId/Controllers/AccessController.cs

        #region Authorize
        [AllowAnonymous, HttpGet("~/connect/authorize"), HttpPost("~/connect/authorize"), IgnoreAntiforgeryToken]
        public async Task<IActionResult> Authorize()
        {
            var response = HttpContext.GetOpenIddictServerResponse();
            if (response != null)
            {
                return View("Error", new OidcErrorDto
                {
                    Error = response.Error,
                    ErrorDescription = response.ErrorDescription
                });
            }

            var request = HttpContext.GetOpenIddictServerRequest();
            if (request == null)
            {
                return NotFound();
            }

            // Retrieve the claims stored in the authentication cookie.
            // If they can't be extracted, redirect the user to the login page.
            var result = await HttpContext.AuthenticateAsync();
            if (result == null || !result.Succeeded || request.HasPrompt(Prompts.Login))
            {
                return RedirectToLoginPage(request);
            }

            // If a max_age parameter was provided, ensure that the cookie is not too old.
            // If it's too old, automatically redirect the user agent to the login page.
            if (request.MaxAge != null && result.Properties.IssuedUtc != null &&
                DateTimeOffset.UtcNow - result.Properties.IssuedUtc > TimeSpan.FromSeconds(request.MaxAge.Value))
            {
                return RedirectToLoginPage(request);
            }
            string clientId = request.ClientId ??
                throw new InvalidOperationException("The application details cannot be found.");
            var application = await _applicationManager.FindByClientIdAsync(clientId) ??
                throw new InvalidOperationException("The application details cannot be found.");
            clientId = await _applicationManager.GetIdAsync(application) ??
                throw new InvalidOperationException("The application details cannot be found.");
            var user = await _userManager.FindByIdAsync(result.Principal.GetUserIdentifier()) ??
                throw new InvalidOperationException("The user details cannot be retrieved.");

            var pscopes = request.GetScopes().Intersect(await GetAppScopes(application)).Intersect(await GetUserScopesAsync(user, clientId)).ToImmutableArray();
            var authorizations = await _authorizationManager.FindAsync(
                subject: result.Principal.GetUserIdentifier(),
                client: clientId,
                status: Statuses.Valid,
                type: AuthorizationTypes.Permanent,
                scopes: pscopes).ToListAsync();

            switch (await _applicationManager.GetConsentTypeAsync(application))
            {
                case ConsentTypes.External when !authorizations.Any():
                    return Forbid(new AuthenticationProperties(new Dictionary<string, string?>
                    {
                        [OpenIddictServerAspNetCoreConstants.Properties.Error] = Errors.ConsentRequired,
                        [OpenIddictServerAspNetCoreConstants.Properties.ErrorDescription] =
                            "The logged in user is not allowed to access this client application."
                    }), OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);

                case ConsentTypes.Implicit:
                case ConsentTypes.External when authorizations.Any():
                case ConsentTypes.Explicit when authorizations.Any() && !request.HasPrompt(Prompts.Consent):
                    var identity = new ClaimsIdentity(result.Principal.Claims, OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
                    // identity.AddClaim(new Claim(OpenIdConstants.Claims.EntityType, OpenIdConstants.EntityTypes.User));

                    // Note: while ASP.NET Core Identity uses the legacy WS-Federation claims (exposed by the ClaimTypes class),
                    // OpenIddict uses the newer JWT claims defined by the OpenID Connect specification. To ensure the mandatory
                    // subject claim is correctly populated (and avoid an InvalidOperationException), it's manually added here.
                    if (string.IsNullOrEmpty(result.Principal.FindFirst(Claims.Subject)?.Value))
                    {
                        identity.AddClaim(new Claim(Claims.Subject, result.Principal.GetUserIdentifier()));
                    }
                    if (string.IsNullOrEmpty(result.Principal.FindFirst(Claims.Name)?.Value))
                    {
                        identity.AddClaim(new Claim(Claims.Name, result.Principal.GetUserName()));
                    }
                    if (pscopes.Contains(OpenIddictConstants.Scopes.Roles))
                    {
                        var rls = await GetUserRolesAsync(user);
                        if (rls.Count > 0)
                        {
                            identity.SetClaims(Claims.Role, rls.ToImmutableArray());
                        }
                    }
                    identity.SetScopes(pscopes);
                    identity.SetResources(await _scopeManager.ListResourcesAsync(identity.GetScopes()).ToListAsync());
                    // Automatically create a permanent authorization to avoid requiring explicit consent
                    // for future authorization or token requests containing the same scopes.
                    var authorization = authorizations.LastOrDefault();
                    authorization ??= await _authorizationManager.CreateAsync(
                        identity: identity,
                        subject: identity.GetUserIdentifier(),
                        client: clientId,
                        type: AuthorizationTypes.Permanent,
                        scopes: identity.GetScopes());

                    identity.SetAuthorizationId(await _authorizationManager.GetIdAsync(authorization));
                    identity.SetDestinations(GetDestinations);
                    return SignIn(new ClaimsPrincipal(identity), OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);

                case ConsentTypes.Explicit when request.HasPrompt(Prompts.None):
                    return Forbid(new AuthenticationProperties(new Dictionary<string, string?>
                    {
                        [OpenIddictServerAspNetCoreConstants.Properties.Error] = Errors.ConsentRequired,
                        [OpenIddictServerAspNetCoreConstants.Properties.ErrorDescription] =
                            "Interactive user consent is required."
                    }), OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);

                default:
                    return View(await PrepareAuthorizeDto(null, application, user, clientId, pscopes));
            }

            IActionResult RedirectToLoginPage(OpenIddictRequest request)
            {
                // If the client application requested promptless authentication,
                // return an error indicating that the user is not logged in.
                if (request.HasPrompt(Prompts.None))
                {
                    return Forbid(new AuthenticationProperties(new Dictionary<string, string?>
                    {
                        [OpenIddictServerAspNetCoreConstants.Properties.Error] = Errors.LoginRequired,
                        [OpenIddictServerAspNetCoreConstants.Properties.ErrorDescription] = "The user is not logged in."
                    }), OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
                }
                string GetRedirectUrl()
                {
                    // Override the prompt parameter to prevent infinite authentication/authorization loops.
                    var parameters = Request.Query.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                    parameters[Parameters.Prompt] = "continue";

                    return Request.PathBase + Request.Path + QueryString.Create(parameters);
                }
                return Challenge(new AuthenticationProperties
                {
                    RedirectUri = GetRedirectUrl()
                });
            }
        }

        [ActionName(nameof(Authorize))]
        [FormValueRequired("submit.Deny"), HttpPost]
        public IActionResult AuthorizeDeny()
        {
            var response = HttpContext.GetOpenIddictServerResponse();
            if (response != null)
            {
                return View("Error", new OidcErrorDto
                {
                    Error = response.Error,
                    ErrorDescription = response.ErrorDescription
                });
            }

            var request = HttpContext.GetOpenIddictServerRequest();
            if (request == null)
            {
                return NotFound();
            }

            return Forbid(OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
        }

        [ActionName(nameof(Authorize))]
        [FormValueRequired("submit.Accept"), HttpPost]
        public async Task<IActionResult> AuthorizeAccept([Bind("ApplicationName", "RoleToAuthorize", "ScopesToAuthorize")] AuthorizeDto authorizeDto)
        {
            // Warning: unlike the main Authorize method, this method MUST NOT be decorated with
            // [IgnoreAntiforgeryToken] as we must be able to reject authorization requests
            // sent by a malicious client that could abuse this interactive endpoint to silently
            // get codes/tokens without the user explicitly approving the authorization demand.

            var response = HttpContext.GetOpenIddictServerResponse();
            if (response != null)
            {
                return View("Error", new OidcErrorDto
                {
                    Error = response.Error,
                    ErrorDescription = response.ErrorDescription
                });
            }

            var request = HttpContext.GetOpenIddictServerRequest();
            if (request == null)
            {
                return NotFound();
            }

            string clientId = request.ClientId ??
                throw new InvalidOperationException("The application details cannot be found.");
            var application = await _applicationManager.FindByClientIdAsync(clientId) ??
                throw new InvalidOperationException("The application details cannot be found.");
            clientId = await _applicationManager.GetIdAsync(application) ??
                throw new InvalidOperationException("The application details cannot be found.");
            if(authorizeDto.ApplicationName != clientId)
                throw new InvalidOperationException("The application details cannot be found.");
            var user = await _userManager.FindByIdAsync(User.GetUserIdentifier()) ??
                throw new InvalidOperationException("The user details cannot be retrieved.");
            var pscopes = request.GetScopes().Intersect(await GetAppScopes(application)).Intersect(await GetUserScopesAsync(user, clientId)).Intersect(authorizeDto.ScopesToAuthorize).ToImmutableArray();


            var authorizations = await _authorizationManager.FindAsync(
                subject: User.GetUserIdentifier(),
                client: clientId,
                status: Statuses.Valid,
                type: AuthorizationTypes.Permanent,
                scopes: request.GetScopes()).ToListAsync();

            // Note: the same check is already made in the GET action but is repeated
            // here to ensure a malicious user can't abuse this POST endpoint and
            // force it to return a valid response without the external authorization.
            switch (await _applicationManager.GetConsentTypeAsync(application))
            {
                case ConsentTypes.External when !authorizations.Any():
                    return Forbid(new AuthenticationProperties(new Dictionary<string, string?>
                    {
                        [OpenIddictServerAspNetCoreConstants.Properties.Error] = Errors.ConsentRequired,
                        [OpenIddictServerAspNetCoreConstants.Properties.ErrorDescription] =
                            "The logged in user is not allowed to access this client application."
                    }), OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);

                default:
                    var identity = new ClaimsIdentity(User.Claims, OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
                    // identity.AddClaim(new Claim(OpenIdConstants.Claims.EntityType, OpenIdConstants.EntityTypes.User));

                    // Note: while ASP.NET Core Identity uses the legacy WS-Federation claims (exposed by the ClaimTypes class),
                    // OpenIddict uses the newer JWT claims defined by the OpenID Connect specification. To ensure the mandatory
                    // subject claim is correctly populated (and avoid an InvalidOperationException), it's manually added here.
                    if (string.IsNullOrEmpty(User.FindFirst(Claims.Subject)?.Value))
                    {
                        identity.AddClaim(new Claim(Claims.Subject, User.GetUserIdentifier()));
                    }
                    if (string.IsNullOrEmpty(User.FindFirst(Claims.Name)?.Value))
                    {
                        identity.AddClaim(new Claim(Claims.Name, User.GetUserName()));
                    }
                    if (pscopes.Contains(OpenIddictConstants.Scopes.Roles))
                    {
                        var rls = await GetUserRolesAsync(user);
                        if (rls.Count > 0)
                        {
                            identity.SetClaims(Claims.Role, rls.ToImmutableArray());
                        }
                    }
                    identity.SetScopes(pscopes);
                    identity.SetResources(await _scopeManager.ListResourcesAsync(identity.GetScopes()).ToListAsync());


                    // Automatically create a permanent authorization to avoid requiring explicit consent
                    // for future authorization or token requests containing the same scopes.
                    var authorization = authorizations.LastOrDefault();
                    authorization ??= await _authorizationManager.CreateAsync(
                        identity: identity,
                        subject: identity.GetUserIdentifier(),
                        client: clientId,
                        type: AuthorizationTypes.Permanent,
                        scopes: identity.GetScopes());

                    identity.SetAuthorizationId(await _authorizationManager.GetIdAsync(authorization));
                    identity.SetDestinations(GetDestinations);

                    return SignIn(new ClaimsPrincipal(identity), OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
            }
        }
        #endregion

        #region Logout
        [AllowAnonymous, HttpGet("~/connect/logout"), HttpPost("~/connect/logout"), IgnoreAntiforgeryToken]
        public async Task<IActionResult> Logout()
        {
            var response = HttpContext.GetOpenIddictServerResponse();
            if (response != null)
            {
                return View("Error", new OidcErrorDto
                {
                    Error = response.Error,
                    ErrorDescription = response.ErrorDescription
                });
            }

            var request = HttpContext.GetOpenIddictServerRequest();
            if (request == null)
            {
                return NotFound();
            }

            if (!string.IsNullOrEmpty(request.PostLogoutRedirectUri))
            {
                // If the user is not logged in, allow redirecting the user agent back to the
                // specified post_logout_redirect_uri without rendering a confirmation form.
                var result = await HttpContext.AuthenticateAsync();
                if (result == null || !result.Succeeded)
                {
                    return SignOut(OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
                }
            }

            return View(new LogoutDto
            {
                RequestId = request.RequestId
            });
        }

        [ActionName(nameof(Logout)), AllowAnonymous]
        [FormValueRequired("submit.Accept"), HttpPost]
        public async Task<IActionResult> LogoutAccept()
        {
            var response = HttpContext.GetOpenIddictServerResponse();
            if (response != null)
            {
                return View("Error", new OidcErrorDto
                {
                    Error = response.Error,
                    ErrorDescription = response.ErrorDescription
                });
            }

            var request = HttpContext.GetOpenIddictServerRequest();
            if (request == null)
            {
                return NotFound();
            }

            // Warning: unlike the main Logout method, this method MUST NOT be decorated with
            // [IgnoreAntiforgeryToken] as we must be able to reject end session requests
            // sent by a malicious client that could abuse this interactive endpoint to silently
            // log the user out without the user explicitly approving the log out operation.

            await HttpContext.SignOutAsync();

            // If no post_logout_redirect_uri was specified, redirect the user agent
            // to the root page, that should correspond to the home page in most cases.
            if (string.IsNullOrEmpty(request.PostLogoutRedirectUri))
            {
                return Redirect("~/");
            }

            return SignOut(OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
        }

        [ActionName(nameof(Logout)), AllowAnonymous]
        [FormValueRequired("submit.Deny"), HttpPost]
        public IActionResult LogoutDeny()
        {
            var response = HttpContext.GetOpenIddictServerResponse();
            if (response != null)
            {
                return View("Error", new OidcErrorDto
                {
                    Error = response.Error,
                    ErrorDescription = response.ErrorDescription
                });
            }

            var request = HttpContext.GetOpenIddictServerRequest();
            if (request == null)
            {
                return NotFound();
            }

            return Redirect("~/");
        }
        #endregion

        #region Token
        [AllowAnonymous, HttpPost]
        [IgnoreAntiforgeryToken]
        [Produces("application/json")]
        public Task<IActionResult> Token()
        {
            // Warning: this action is decorated with IgnoreAntiforgeryTokenAttribute to override
            // the global antiforgery token validation policy applied by the MVC modules stack,
            // which is required for this stateless OAuth2/OIDC token endpoint to work correctly.
            // To prevent effective CSRF/session fixation attacks, this action MUST NOT return
            // an authentication cookie or try to establish an ASP.NET Core user session.

            var request = HttpContext.GetOpenIddictServerRequest();
            if (request == null)
            {
                return Task.FromResult((IActionResult)NotFound());
            }

            if (request.IsPasswordGrantType())
            {
                return ExchangePasswordGrantType(request);
            }

            if (request.IsClientCredentialsGrantType())
            {
                return ExchangeClientCredentialsGrantType(request);
            }

            if (request.IsAuthorizationCodeGrantType() || request.IsRefreshTokenGrantType())
            {
                return ExchangeAuthorizationCodeOrRefreshTokenGrantType(request);
            }

            throw new NotSupportedException("The specified grant type is not supported.");
        }

        #endregion 

        #region Token ExchangePasswordGrantType
        private async Task<IActionResult> ExchangePasswordGrantType(OpenIddictRequest request)
        {
            string clientId = request.ClientId ??
                throw new InvalidOperationException("The application details cannot be found.");
            var application = await _applicationManager.FindByClientIdAsync(clientId) ??
                throw new InvalidOperationException("The application details cannot be found.");

            // By design, the password flow requires direct username/password validation, which is performed by
            // the user service. If this service is not registered, prevent the password flow from being used.
            OidcIdentityUser user = await _userManager.FindByNameAsync(request.Username)!; 
            if(user == null)
            {
                var properties = new AuthenticationProperties(new Dictionary<string, string?>
                {
                    [OpenIddictServerAspNetCoreConstants.Properties.Error] = Errors.InvalidGrant,
                    [OpenIddictServerAspNetCoreConstants.Properties.ErrorDescription] =
                       "The username/password couple is invalid."
                });

                return Forbid(properties, OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
            };

            // Validate the username/password parameters and ensure the account is not locked out.
            var result = await _signInManager.CheckPasswordSignInAsync(user, request.Password, lockoutOnFailure: true);
            if (!result.Succeeded)
            {
                var properties = new AuthenticationProperties(new Dictionary<string, string?>
                {
                    [OpenIddictServerAspNetCoreConstants.Properties.Error] = Errors.InvalidGrant,
                    [OpenIddictServerAspNetCoreConstants.Properties.ErrorDescription] =
                      "The username/password couple is invalid."
                });

                return Forbid(properties, OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
            }

            var claimsIdentity = new ClaimsIdentity(
                authenticationType: TokenValidationParameters.DefaultAuthenticationType,
                nameType: Claims.Name,
                roleType: Claims.Role);
            var pscopes = request.GetScopes().Intersect(await GetAppScopes(application)).Intersect(await GetUserScopesAsync(user, clientId)).ToImmutableArray();
            await AddUserClaimsAsync(claimsIdentity, user);

            // Note: while ASP.NET Core Identity uses the legacy WS-Federation claims (exposed by the ClaimTypes class),
            // OpenIddict uses the newer JWT claims defined by the OpenID Connect specification. To ensure the mandatory
            // subject claim is correctly populated (and avoid an InvalidOperationException), it's manually added here.
            if (string.IsNullOrEmpty(claimsIdentity.FindFirst(Claims.Subject)?.Value))
            {
                claimsIdentity.AddClaim(new Claim(Claims.Subject, await _userManager.GetUserIdAsync(user)));
            }
            if (string.IsNullOrEmpty(claimsIdentity.FindFirst(Claims.Name)?.Value))
            {
                claimsIdentity.AddClaim(new Claim(Claims.Name, await _userManager.GetUserNameAsync(user)));
            }
            if (pscopes.Contains(OpenIddictConstants.Scopes.Roles))
            {
                var rls = await GetUserRolesAsync(user);
                if (rls.Count > 0)
                {
                    claimsIdentity.SetClaims(Claims.Role, rls.ToImmutableArray());
                }
            }



            var authorizations = await _authorizationManager.FindAsync(
                subject: claimsIdentity.GetUserIdentifier(),
                client: clientId,
                status: Statuses.Valid,
                type: AuthorizationTypes.Permanent,
                scopes: pscopes).ToListAsync();

            // If the application is configured to use external consent,
            // reject the request if no existing authorization can be found.
            switch (await _applicationManager.GetConsentTypeAsync(application))
            {
                case ConsentTypes.External when !authorizations.Any():
                    return Forbid(new AuthenticationProperties(new Dictionary<string, string?>
                    {
                        [OpenIddictServerAspNetCoreConstants.Properties.Error] = Errors.ConsentRequired,
                        [OpenIddictServerAspNetCoreConstants.Properties.ErrorDescription] =
                            "The logged in user is not allowed to access this client application."
                    }), OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
            }


            claimsIdentity.SetScopes(pscopes);
            claimsIdentity.SetResources(await _scopeManager.ListResourcesAsync(claimsIdentity.GetScopes()).ToListAsync());
            

            // Automatically create a permanent authorization to avoid requiring explicit consent
            // for future authorization or token requests containing the same scopes.
            var authorization = authorizations.FirstOrDefault();
            authorization ??= await _authorizationManager.CreateAsync(
                identity: claimsIdentity,
                subject: claimsIdentity.GetUserIdentifier(),
                client: clientId,
                type: AuthorizationTypes.Permanent,
                scopes: claimsIdentity.GetScopes());

            claimsIdentity.SetAuthorizationId(await _authorizationManager.GetIdAsync(authorization));
            claimsIdentity.SetDestinations(GetDestinations);

            return SignIn(new ClaimsPrincipal(claimsIdentity), OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
        }
        #endregion 

        #region Token ExchangeClientCredentialsGrantType
        private async Task<IActionResult> ExchangeClientCredentialsGrantType(OpenIddictRequest request)
        {
            if (request.HasScope(OpenIddictConstants.Scopes.OfflineAccess))
            {
                return Forbid(new AuthenticationProperties(new Dictionary<string, string?>
                {
                    [OpenIddictServerAspNetCoreConstants.Properties.Error] = Errors.InvalidScope,
                    [OpenIddictServerAspNetCoreConstants.Properties.ErrorDescription] =
                        "The 'offline_access' scope is not allowed when using the client credentials grant."
                }), OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
            }

            string clientId = request.ClientId ??
                throw new InvalidOperationException("The application details cannot be found.");
            // Note: client authentication is always enforced by OpenIddict before this action is invoked.
            var application = await _applicationManager.FindByClientIdAsync(clientId) ??
                throw new InvalidOperationException("The application details cannot be found.");

            var claimsIdentity = new ClaimsIdentity(
                OpenIddictServerAspNetCoreDefaults.AuthenticationScheme,
                Claims.Name, Claims.Role);

            claimsIdentity.AddClaim(new Claim(Claims.Subject, request.ClientId));
            // Always add a "name" claim for grant_type=client_credentials in both
            // access and identity tokens even if the "name" scope wasn't requested.
            claimsIdentity.AddClaim(new Claim(Claims.Name, await _applicationManager.GetDisplayNameAsync(application) ?? "")
                .SetDestinations(Destinations.AccessToken, Destinations.IdentityToken));

            var pscopes = request.GetScopes().Intersect(await GetAppScopes(application)).ToImmutableArray();
            claimsIdentity.SetScopes(pscopes);
            claimsIdentity.SetResources(await _scopeManager.ListResourcesAsync(claimsIdentity.GetScopes()).ToListAsync());
            return SignIn(new ClaimsPrincipal(claimsIdentity), OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
        }
        #endregion 

        #region Token ExchangeAuthorizationCodeOrRefreshTokenGrantType
        private async Task<IActionResult> ExchangeAuthorizationCodeOrRefreshTokenGrantType(OpenIddictRequest request)
        {
            // Retrieve the claims principal stored in the authorization code/refresh token.
            var info = await HttpContext.AuthenticateAsync(OpenIddictServerAspNetCoreDefaults.AuthenticationScheme) ??
                throw new InvalidOperationException("The user principal cannot be resolved.");

            //if (request.IsRefreshTokenGrantType())
            //{
            //    var type = info.Principal.FindFirst(OpenIdConstants.Claims.EntityType)?.Value;
            //    if (!string.Equals(type, OpenIdConstants.EntityTypes.User))
            //    {
            //        return Forbid(new AuthenticationProperties(new Dictionary<string, string?>
            //        {
            //            [OpenIddictServerAspNetCoreConstants.Properties.Error] = Errors.UnauthorizedClient,
            //            [OpenIddictServerAspNetCoreConstants.Properties.ErrorDescription] =
            //                "The refresh token grant type is not allowed for refresh tokens retrieved using the client credentials flow."
            //        }), OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
            //    }
            //}

            // By default, re-use the principal stored in the authorization code/refresh token.
            ClaimsPrincipal principal = info.Principal!;
            OidcIdentityUser user = await _userManager.FindByIdAsync(principal.GetUserIdentifier());
            // If the user service is available, try to refresh the principal by retrieving
            // the user object from the database and creating a new claims-based principal.
            if (user != null)
            {
                var claimsIdentity = new ClaimsIdentity(
                    authenticationType: TokenValidationParameters.DefaultAuthenticationType,
                    nameType: Claims.Name,
                    roleType: Claims.Role);
                await AddUserClaimsAsync(claimsIdentity, user);
                // Note: while ASP.NET Core Identity uses the legacy WS-Federation claims (exposed by the ClaimTypes class),
                // OpenIddict uses the newer JWT claims defined by the OpenID Connect specification. To ensure the mandatory
                // subject claim is correctly populated (and avoid an InvalidOperationException), it's manually added here.
                if (string.IsNullOrEmpty(claimsIdentity.FindFirst(Claims.Subject)?.Value))
                {
                    claimsIdentity.AddClaim(new Claim(Claims.Subject, await _userManager.GetUserIdAsync(user)));
                }
                if (string.IsNullOrEmpty(claimsIdentity.FindFirst(Claims.Name)?.Value))
                {
                    claimsIdentity.AddClaim(new Claim(Claims.Name, await _userManager.GetUserNameAsync(user)));
                }
                principal = new ClaimsPrincipal(claimsIdentity);
            }


            //identity.AddClaim(new Claim(OpenIdConstants.Claims.EntityType, OpenIdConstants.EntityTypes.User));

            // Note: while ASP.NET Core Identity uses the legacy WS-Federation claims (exposed by the ClaimTypes class),
            // OpenIddict uses the newer JWT claims defined by the OpenID Connect specification. To ensure the mandatory
            // subject claim is correctly populated (and avoid an InvalidOperationException), it's manually added here.
            if (principal.Identity is ClaimsIdentity identity)
            {
                if (string.IsNullOrEmpty(principal.FindFirst(Claims.Subject)?.Value))
                {
                    identity.AddClaim(new Claim(Claims.Subject, principal.GetUserIdentifier()));
                }
                if (string.IsNullOrEmpty(principal.FindFirst(Claims.Name)?.Value))
                {
                    identity.AddClaim(new Claim(Claims.Name, principal.GetUserName()));
                }
                identity.SetDestinations(GetDestinations);
            }

            return SignIn(principal, OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
        }
        #endregion

        #region Device flow
        // Note: to support the device flow, you must provide your own verification endpoint action:
        [Authorize, HttpGet("~/connect/verify"), IgnoreAntiforgeryToken]
        public async Task<IActionResult> Verify()
        {
            var request = HttpContext.GetOpenIddictServerRequest() ??
                throw new InvalidOperationException("The OpenID Connect request cannot be retrieved.");

            // If the user code was not specified in the query string (e.g as part of the verification_uri_complete),
            // render a form to ask the user to enter the user code manually (non-digit chars are automatically ignored).
            if (string.IsNullOrEmpty(request.UserCode))
            {
                return View(new VerifyViewDto());
            }

            // Retrieve the claims principal associated with the user code.
            var result = await HttpContext.AuthenticateAsync(OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
            if (result.Succeeded)
            {
                // Retrieve the application details from the database using the client_id stored in the principal.
                var application = await _applicationManager.FindByClientIdAsync(result.Principal.GetClaim(Claims.ClientId) ?? "") ??
                    throw new InvalidOperationException("Details concerning the calling client application cannot be found.");

                // Render a form asking the user to confirm the authorization demand.
                return View(new VerifyViewDto
                {
                    ApplicationName = await _applicationManager.GetLocalizedDisplayNameAsync(application),
                    Scope = string.Join(" ", result.Principal.GetScopes()),
                    UserCode = request.UserCode
                });
            }

            // Redisplay the form when the user code is not valid.
            return View(new VerifyViewDto
            {
                Error = Errors.InvalidToken,
                ErrorDescription = "The specified user code is not valid. Please make sure you typed it correctly."
            });
        }

        [Authorize, FormValueRequired("submit.Accept")]
        [HttpPost("~/connect/verify"), ValidateAntiForgeryToken]
        public async Task<IActionResult> VerifyAccept()
        {
            // Retrieve the profile of the logged in user.
            var user = await _userManager.GetUserAsync(User) ??
                throw new InvalidOperationException("The user details cannot be retrieved.");

            // Retrieve the claims principal associated with the user code.
            var result = await HttpContext.AuthenticateAsync(OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
            if (result.Succeeded)
            {
                // Create the claims-based identity that will be used by OpenIddict to generate tokens.
                var identity = new ClaimsIdentity(
                    authenticationType: TokenValidationParameters.DefaultAuthenticationType,
                    nameType: Claims.Name,
                    roleType: Claims.Role);

                // Add the claims that will be persisted in the tokens.
                identity.SetClaim(Claims.Subject, await _userManager.GetUserIdAsync(user))
                        .SetClaim(Claims.Email, await _userManager.GetEmailAsync(user))
                        .SetClaim(Claims.Name, await _userManager.GetUserNameAsync(user))
                        .SetClaims(Claims.Role, (await _userManager.GetRolesAsync(user)).ToImmutableArray());

                // Note: in this sample, the granted scopes match the requested scope
                // but you may want to allow the user to uncheck specific scopes.
                // For that, simply restrict the list of scopes before calling SetScopes.
                identity.SetScopes(result.Principal.GetScopes());
                identity.SetResources(await _scopeManager.ListResourcesAsync(identity.GetScopes()).ToListAsync());
                identity.SetDestinations(GetDestinations);

                var properties = new AuthenticationProperties
                {
                    // This property points to the address OpenIddict will automatically
                    // redirect the user to after validating the authorization demand.
                    RedirectUri = "/"
                };

                return SignIn(new ClaimsPrincipal(identity), properties, OpenIddictServerAspNetCoreDefaults.AuthenticationScheme);
            }

            // Redisplay the form when the user code is not valid.
            return View(new VerifyViewDto
            {
                Error = Errors.InvalidToken,
                ErrorDescription = "The specified user code is not valid. Please make sure you typed it correctly."
            });
        }

        [Authorize, FormValueRequired("submit.Deny")]
        [HttpPost("~/connect/verify"), ValidateAntiForgeryToken]
        // Notify OpenIddict that the authorization grant has been denied by the resource owner.
        public IActionResult VerifyDeny() => Forbid(
            authenticationSchemes: OpenIddictServerAspNetCoreDefaults.AuthenticationScheme,
            properties: new AuthenticationProperties()
            {
                // This property points to the address OpenIddict will automatically
                // redirect the user to after rejecting the authorization demand.
                RedirectUri = "/"
            });
        #endregion



        #region Helper methods
        protected virtual async Task<AuthorizeDto> PrepareAuthorizeDto(AuthorizeDto? model, object application, OidcIdentityUser user, string clientId, ImmutableArray<string> pscopes)
        {
            model ??= new AuthorizeDto();

            model.ApplicationName = clientId;
            model.LocalizedApplicationName = await _applicationManager.GetLocalizedDisplayNameAsync(application);

            // collect roles
            if (pscopes.Contains(OpenIddictConstants.Scopes.Roles))
            {
                model.RoleToAuthorize.AddRange(await GetUserRolesAsync(user));
            }
            // collect scopes 
            List<(string, string?, string?, List<string>)> ScpWithRes = new();
            foreach (var rscp in pscopes)
            {
                model.ScopesToAuthorize.Add(rscp);
                Object? oscp = await _scopeManager.FindByNameAsync(rscp);
                if (oscp != null)
                {
                    string? ldispname = await _scopeManager.GetLocalizedDisplayNameAsync(oscp);
                    string? ldescr = await _scopeManager.GetLocalizedDescriptionAsync(oscp);
                    (string, string?, string?, List<string>) itm = (rscp, ldispname, ldescr, new List<string>());
                    foreach (var resource in await _scopeManager.GetResourcesAsync(oscp))
                    {
                        itm.Item4.Add(resource);
                    }
                    ScpWithRes.Add(itm);
                }
            }
            ViewBag.ScpWithRes = ScpWithRes;
            return model;
        }
        protected virtual async Task<List<string>> GetUserRolesAsync(OidcIdentityUser user)
        {
            List<string> rslt = new(); 
            foreach (var assignedRole in await _userManager.GetRolesAsync(user))
            {
                if ((assignedRole != null) && (!assignedRole.StartsWith(_roleprefixval)))
                {
                        rslt.Add(assignedRole);
                }
                
            }
            return rslt;
        }
        protected virtual async Task<List<string>> GetAppScopes(object app)
        {
            var permissions = await _applicationManager.GetPermissionsAsync(app);
            List<string> scopes = new();
            foreach (var permission in permissions)
            {
                if (string.IsNullOrEmpty(permission)) continue;
                if (!permission.StartsWith(Prefixes.Scope)) continue;
                var prms = permission[Prefixes.Scope.Length..].Trim().Split(Separators.Space, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                if (prms.Length > 0)
                {
                    scopes.AddRange(prms);
                }
            }
            return scopes;
        }
        protected virtual async Task<List<string>> GetUserScopesAsync(OidcIdentityUser user, string appId)
        {
            List<string> rslt = new ();
            string prfx = _claimprefixval + appId;
            var uclaims = (await _userManager.GetClaimsAsync(user)).Where(c => c.Type.StartsWith(prfx) && (!string.IsNullOrEmpty(c.Value))).ToArray();
            if (uclaims != null)
            {
                foreach (var claim in uclaims)
                {
                    if (claim.Value.StartsWith(Prefixes.Scope))
                    {
                        var scps = claim.Value[Prefixes.Scope.Length..].Trim().Split(Separators.Space, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                        foreach (var scp in scps)
                        {
                            if (!rslt.Contains(scp)) rslt.Add(scp);
                        }
                    }
                }
            }
            var roleNames = (await _userManager.GetRolesAsync(user)).Where(r => r.StartsWith(_roleprefixval)).ToArray();
            if(roleNames.Length > 0)
            {
                 var roles = await _roleManager.Roles.Where(r => roleNames.Contains(r.Name)).ToListAsync();
                foreach (var role in roles)
                {
                    var rclaims = (await _roleManager.GetClaimsAsync(role)).Where(c => c.Type.StartsWith(prfx) && (!string.IsNullOrEmpty(c.Value))).ToArray();
                    if (rclaims != null)
                    {
                        foreach (var claim in rclaims)
                        {
                            if (claim.Value.StartsWith(Prefixes.Scope))
                            {
                                var scps = claim.Value[Prefixes.Scope.Length..].Trim().Split(Separators.Space, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                                foreach (var scp in scps)
                                {
                                    if (!rslt.Contains(scp)) rslt.Add(scp);
                                }
                            }
                        }
                    }
                }
            }
            return rslt;
        }
        protected virtual async Task AddUserClaimsAsync(ClaimsIdentity claimsIdentity, OidcIdentityUser user)
        {
            foreach (var claim in await _userManager.GetClaimsAsync(user))
            {
                if (claim != null)
                {
                    if ((claim.Type != null) && claim.Type.StartsWith(_claimprefixval)) continue;
                    claimsIdentity.AddClaim(claim);
                }
            }
            foreach (var assignedRole in await _userManager.GetRolesAsync(user))
            {
                if ((assignedRole != null) && assignedRole.StartsWith(_roleprefixval)) continue;
                var role = await _roleManager.FindByNameAsync(assignedRole);
                foreach (var claim in await _roleManager.GetClaimsAsync(role))
                {
                    if (claim != null)
                    {
                        if ((claim.Type != null) && claim.Type.StartsWith(_claimprefixval)) continue;
                        claimsIdentity.AddClaim(claim);
                    }
                }
            }
        }
        private static IEnumerable<string> GetDestinations(Claim claim)
        {
            // Note: by default, claims are NOT automatically included in the access and identity tokens.
            // To allow OpenIddict to serialize them, you must attach them a destination, that specifies
            // whether they should be included in access tokens, in identity tokens or in both.

            switch (claim.Type)
            {
                // If the claim already includes destinations (set before this helper is called), flow them as-is.
                case string when claim.GetDestinations() is { IsDefaultOrEmpty: false } destinations:
                    return destinations;

                // Never include the security stamp in the access and identity tokens, as it's a secret value.
                case "AspNet.Identity.SecurityStamp":
                    return Enumerable.Empty<string>();

                // Only add the claim to the id_token if the corresponding scope was granted.
                // The other claims will only be added to the access_token.
                //case OpenIdConstants.Claims.EntityType:
                case Claims.Name when (claim.Subject != null) && claim.Subject.HasScope(OpenIddictConstants.Scopes.Profile):
                case Claims.Email when (claim.Subject != null) && claim.Subject.HasScope(OpenIddictConstants.Scopes.Email):
                case Claims.Role when (claim.Subject != null) && claim.Subject.HasScope(OpenIddictConstants.Scopes.Roles):
                    return new[]
                    {
                        Destinations.AccessToken,
                        Destinations.IdentityToken
                    };

                default: return new[] { Destinations.AccessToken };
            }
        }
        #endregion
    }
}
