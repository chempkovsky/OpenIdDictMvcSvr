<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Добавить</value>
  </data>
  <data name="Are you sure you want to delete this?" xml:space="preserve">
    <value>Вы уверены, что хотите удалить это?</value>
  </data>
  <data name="Back to List" xml:space="preserve">
    <value>Обратно к списку</value>
  </data>
  <data name="Claim" xml:space="preserve">
    <value>Заявка(Claim)</value>
  </data>
  <data name="Claim in detail" xml:space="preserve">
    <value>Заявка(Claim) в деталях</value>
  </data>
  <data name="Claim property keys cannot be null or empty." xml:space="preserve">
    <value>Ключи свойств утверждения не могут быть нулевыми или пустыми.</value>
  </data>
  <data name="Claims" xml:space="preserve">
    <value>Заявки(Claims)</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Создать</value>
  </data>
  <data name="Create New" xml:space="preserve">
    <value>Создать новую</value>
  </data>
  <data name="Created a new Claim with type:" xml:space="preserve">
    <value>Создана новая заявка(Claim) типа:</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Удалить</value>
  </data>
  <data name="Delete Claim" xml:space="preserve">
    <value>Удалить заявку(Claim)</value>
  </data>
  <data name="Deleted a Claim with type:" xml:space="preserve">
    <value>Создана заявка(Claim) типа:</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Подробности</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Редактировать</value>
  </data>
  <data name="Failed to add claim to role:" xml:space="preserve">
    <value>Не удалось добавить заявку(Claim) для роли:</value>
  </data>
  <data name="Failed to add claim to user:" xml:space="preserve">
    <value>Не удалось добавить заявку(Claim) пользователю:</value>
  </data>
  <data name="Failed to find role by id:" xml:space="preserve">
    <value>Не удалось найти роль по идентификатору:</value>
  </data>
  <data name="Failed to find user by id:" xml:space="preserve">
    <value>Не удалось найти пользователя по идентификатору:</value>
  </data>
  <data name="For Role with Id:" xml:space="preserve">
    <value>Для роли с идентификатором:</value>
  </data>
  <data name="For User with Id:" xml:space="preserve">
    <value>Для пользователя с идентификатором:</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Домашняя страница</value>
  </data>
  <data name="New Claim" xml:space="preserve">
    <value>Новая заявка</value>
  </data>
  <data name="Property Key" xml:space="preserve">
    <value>Ключ свойства</value>
  </data>
  <data name="Property Value" xml:space="preserve">
    <value>Значение свойства</value>
  </data>
  <data name="Roles" xml:space="preserve">
    <value>Роли</value>
  </data>
  <data name="The Claim Propertie Key field is required." xml:space="preserve">
    <value>Поле Ключ свойства является обязательным.</value>
  </data>
  <data name="The Claim Propertie Value field is required." xml:space="preserve">
    <value>Поле Значение свойства является обязательным.</value>
  </data>
  <data name="Two Claim properties have identical key." xml:space="preserve">
    <value>Два свойства утверждения имеют одинаковый ключ.</value>
  </data>
  <data name="Users" xml:space="preserve">
    <value>Пользователи</value>
  </data>
</root>