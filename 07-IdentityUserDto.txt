==1==
make importing AspNetRoles-table with "data-annotations"/ It'll be important for creating DTO-classes
--------------------------------------------------------
.NET CLI
dotnet ef dbcontext scaffold "Name=ConnectionStrings:DefaultConnection" --data-annotations --table AspNetUsers Microsoft.EntityFrameworkCore.SqlServer

PMC
Scaffold-DbContext 'Name=ConnectionStrings:DefaultConnection' -DataAnnotations -Tables AspNetUsers Microsoft.EntityFrameworkCore.SqlServer
Scaffold-DbContext 'Data Source=dbsx;Initial Catalog=Identity_Server;User ID=sa;Password=01011967;TrustServerCertificate=True;' -DataAnnotations -Tables AspNetUsers Microsoft.EntityFrameworkCore.SqlServer
--------------------------------------------------------
==2==
using the generated file create DTO classe
--------------------------------------------------------
namespace OpenIdDictMvcSvr.Dto
{
    public class IdentityUserDto
    {
        [Display(Name = "User ID")]
        [Required(ErrorMessage = "The User Id field is required.")]
        public string Id { get; set; } = null!;

        
        [Required(ErrorMessage = "The User Name field is required.")]
        [StringLength(256)]
        [Display(Name = "User Name")]
        public string? UserName { get; set; }

        [StringLength(256)]
        [Display(Name = "Normalized Name")]
        public string? NormalizedUserName { get; set; }

        [Required(ErrorMessage = "The Email field is required.")]
        [StringLength(256)]
        [Display(Name = "Email")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "The Normalized Email field is required.")]
        [StringLength(256)]
        [Display(Name = "Normalized Email")]
        public string? NormalizedEmail { get; set; }

        [Display(Name = "Email confirmed")]
        public bool EmailConfirmed { get; set; }

        [Display(Name = "Password Hash")]
        public string? PasswordHash { get; set; }

        [Display(Name = "Security Stamp")]
        public string? SecurityStamp { get; set; }

        [Display(Name = "Concurrency Stamp")]
        public string? ConcurrencyStamp { get; set; }
        
        [Display(Name = "Phone Number")]
        public string? PhoneNumber { get; set; }

        [Display(Name = "Phone Number Confirmed")]
        public bool PhoneNumberConfirmed { get; set; }

        [Display(Name = "Two Factor Enabled")]
        public bool TwoFactorEnabled { get; set; }

        [Display(Name = "Lockout End")]
        public DateTimeOffset? LockoutEnd { get; set; }
        
        [Display(Name = "Lockout Enabled")]
        public bool LockoutEnabled { get; set; }

    }
}
--------------------------------------------------------

==3==
using IdentityUserDto class create Scaffolded-CRUD mvc controller and views
(remove Create and Edit action)


==4==
Added pagination
4.1. Pay special attention to "asp-route-..."
asp-route-currpg="@pager.PageCount" 
asp-route-searchby="@searchbyid" 
asp-route-searchstr="@Uri.EscapeDataString(searchstr)"

--------------------------------------------------------
<nav aria-label="Page navigation">
    <ul class="pagination flex-wrap">
        <li class="page-item @(pager.CurrentPage > 1 ? " " : " disabled" )">
            <a asp-route-currpg="1" asp-route-searchby="@searchbyid" asp-route-searchstr="@Uri.EscapeDataString(searchstr)"
               class="page-link" aria-label="Frist">
                <span aria-hidden="true">|<</span>
                
            </a>
        </li>
        <li class="page-item @(pager.CurrentPage > 1 ? " " : " disabled" )">
            <a asp-route-currpg="@(pager.CurrentPage - 1)" asp-route-searchby="@searchbyid" asp-route-searchstr="@Uri.EscapeDataString(searchstr)"
               class="page-link" aria-label="Next">
                <span aria-hidden="true"><</span>
                
            </a>
        </li>
        @for (var i = pager.PrintFrom; i <= pager.PrintTo; i++)
        {
            <li class="page-item @(i == pager.CurrentPage ? "active disabled" : "")">
                <a asp-route-currpg="@i" asp-route-searchby="@searchbyid" asp-route-searchstr="@Uri.EscapeDataString(searchstr)"
                    class="page-link">@i</a>
            </li>
        }
        <li class="page-item @(pager.CurrentPage < pager.PageCount ? " " : " disabled" )">
            <a asp-route-currpg="@(pager.CurrentPage + 1)" asp-route-searchby="@searchbyid" asp-route-searchstr="@Uri.EscapeDataString(searchstr)"
               class="page-link" aria-label="Previous">
                <span aria-hidden="true">></span>
                
            </a>
        </li>
        <li class="page-item @(pager.CurrentPage < pager.PageCount ? " " : " disabled" )">
            <a asp-route-currpg="@pager.PageCount" asp-route-searchby="@searchbyid" asp-route-searchstr="@Uri.EscapeDataString(searchstr)"
               class="page-link" aria-label="Last">
                <span aria-hidden="true">>|</span>
                
            </a>
        </li>
    </ul>
</nav>
--------------------------------------------------------

4.2. Pay special attention to "PageDto"
--------------------------------------------------------
            PageDto pager = new PageDto() { PageSize = 10 };
            if (currpg.HasValue)
            {
                pager.CurrentPage = currpg.Value;
            } else
            {
                pager.CurrentPage = 1;
            }
...

            int total = await query.CountAsync();
            pager.PageCount = total / pager.PageSize;
            if (pager.PageCount * pager.PageSize < total) pager.PageCount++;
            if ((pager.CurrentPage > pager.PageCount) || (pager.CurrentPage < 1)) pager.CurrentPage = 1;
            pager.PrintFrom = pager.CurrentPage-2;
            if (pager.PrintFrom < 1) pager.PrintFrom = 1;
            pager.PrintTo = pager.PrintFrom + 5;
            if (pager.PrintTo > pager.PageCount) pager.PrintTo = pager.PageCount;
            ViewBag.SearchById = SearchById ? "0" : "1";
--------------------------------------------------------
